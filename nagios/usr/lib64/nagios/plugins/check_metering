#!/bin/bash

OK_TIMEOUT=120
TIMEOUT=300


while getopts u:p: option
do
 case "${option}"
 in
 u) USR=${OPTARG};;
 p) PASS=${OPTARG};;
 esac
done


function unknown {
    echo "Could not get latest metering snapshot timestamp"
    exit 3
}

if [ -z "$USR" ] || [ -z "$PASS" ]; then
    echo "Missing Nagios metering service credentials"
    exit 3
fi

# log into the server
curl --silent --cookie-jar ~/cookies -b ~/cookies -sS \
        https://nuv.la/api/session \
	-D - \
	-o /dev/null \
        -XPOST \
        -H content-type:application/x-www-form-urlencoded \
        -d href=session-template/internal \
        -d username="$USR" \
	-d password="$PASS" > /dev/null

json=`curl --silent --cookie-jar ~/cookies -b ~/cookies -sS 'https://nuv.la/api/metering?$aggregation=min:snapshot-time&$aggregation=max:snapshot-time&$last=0'`

ts=`echo $json | jq '.["aggregations"]["max:snapshot-time"]["value"]'`

if [ "$ts" == "null" ]; then
    unknown
fi

if [ -n "$ts" ]; then
    age=$((`date +%s` - ($ts / 1000)))
else
 unknown
fi

latest_timestamp=`echo $json | jq '.["aggregations"]["max:snapshot-time"]["value_as_string"]'`

if [ $age -lt $OK_TIMEOUT ]
then
    echo "OK- Latest metering snapshot was recorded $age seconds ago"
    exit 0
fi

if [ $age -lt $TIMEOUT ]
then
    echo "WARNING - Latest Metering snapshot was recorded $age seconds ago"
    exit 1
fi

if [ $age -gt $TIMEOUT ]
then
    echo "Latest metering snapshot [$latest_timestamp] is too old"
    exit 2
fi

unknown 
